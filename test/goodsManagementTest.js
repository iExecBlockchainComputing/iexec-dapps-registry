/**
 * @author Gast√≥n Rial
 * @description To run this test: 1) Start testrpc (v6.0.3)
 *                                2) $ Truffle test ${PWD}/goodsManagementTest.js
 */

var GoodsManagement = artifacts.require( 'GoodsManagement.sol' ); // Contract abstraction

/**
 * @description This test the normal (without errors) flow of events when interacting with the contract
 */
contract ( 'GoodsManagement test: Normal flow', function (accounts) {
  
  let goodsPrice;
  let GoodsManagementInstance;
  let goodsId;
  let nameProperty;
  let unitProperty;
  let valueProperty;
  let updateTime;
  before( 'initialize variables' , function () {
    goodsPrice = web3.toWei(0.001,'ether'); // get Price in Wei
    goodsId = 1;
    nameProperty = 'prop#1';
    unitProperty = 'unit#1';
    valueProperty = 29;
    updateTime = Date.now()/1000; // gives back the time in millisec
  } );

  /**
   * @description First test: Create a new good
  */
  it( 'Creating new goods and checking event logs' , function(){
      return GoodsManagement.deployed().then( function (instance) {
        GoodsManagementInstance = instance;
        return GoodsManagementInstance.createGoods( goodsPrice , {
            from : accounts[0],
            gas: 4712388
        } );
      } ).then( function (receipt) { // Check event logs : createGoodsEvent
          assert.equal(receipt.logs.length, 1 ,'Should have received one event');
          assert.equal(receipt.logs[0].event, "createGoodsEvent", "event name should be createGoodsEvent"); 
          assert.equal(receipt.logs[0].args._id , goodsId , `goods autogenerated id should be ${goodsId}` );
          assert.equal(receipt.logs[0].args._price.toNumber() , goodsPrice , `goods price should be ${goodsPrice}` );
      } );
  } );

  /**
   * @description Second test: Create a new good
  */
  it( 'Add new property to the existing goods and checking with getter' , function(){
    return GoodsManagementInstance.createProperty( goodsId,web3.toHex(nameProperty), web3.toHex(unitProperty), valueProperty , {
          from : accounts[0],
          gas: 4712388
      } ).then( function (receipt) { 
          // Call getter
          return GoodsManagementInstance.getPropertiesOfGoods(goodsId,nameProperty);
      } ).then( function (results) {
        assert.equal(web3.toAscii(results[0]).replace(/[\u0000]/ig,''), nameProperty,`The property name should be ${nameProperty}`);
        assert.equal(web3.toAscii(results[1]).replace(/[\u0000]/ig,''), unitProperty, `The property unit should be ${unitProperty}`); 
        assert.equal(results[2].toNumber(), valueProperty, `The property value should be ${valueProperty}`);
        assert.isAtLeast(results[3].toNumber() , updateTime , `The property creation time is greater or equal to ${new Date(updateTime*1000)}` );
    } )

 } );

} );